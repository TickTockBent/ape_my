name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi
      shell: bash

    - name: Run tests (with coverage)
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.22'
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Run tests (without coverage)
      if: matrix.os != 'ubuntu-latest' || matrix.go-version != '1.22'
      run: go test -v -race ./...

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.22'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build binary
      run: go build -v -o bin/ape_my ./cmd/ape_my

    - name: Test binary runs
      run: ./bin/ape_my --version

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ape_my-linux-amd64
        path: bin/ape_my

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build binary
      run: go build -o bin/ape_my ./cmd/ape_my

    - name: Run end-to-end tests
      run: |
        chmod +x tests/end_to_end_test.sh
        ./tests/end_to_end_test.sh
